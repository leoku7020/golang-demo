// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package logger

import (
	"errors"
	"fmt"
	"strings"
)

const (
	// ExporterNone is a Exporter of type None.
	// Not existed
	ExporterNone Exporter = iota
	// ExporterZap is a Exporter of type Zap.
	// Coordinate logs with Zap (https://github.com/uber-go/zap)
	ExporterZap
)

var ErrInvalidExporter = errors.New("not a valid Exporter")

const _ExporterName = "NoneZap"

var _ExporterMap = map[Exporter]string{
	ExporterNone: _ExporterName[0:4],
	ExporterZap:  _ExporterName[4:7],
}

// String implements the Stringer interface.
func (x Exporter) String() string {
	if str, ok := _ExporterMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Exporter(%d)", x)
}

var _ExporterValue = map[string]Exporter{
	_ExporterName[0:4]:                  ExporterNone,
	strings.ToLower(_ExporterName[0:4]): ExporterNone,
	_ExporterName[4:7]:                  ExporterZap,
	strings.ToLower(_ExporterName[4:7]): ExporterZap,
}

// ParseExporter attempts to convert a string to a Exporter.
func ParseExporter(name string) (Exporter, error) {
	if x, ok := _ExporterValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _ExporterValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Exporter(0), fmt.Errorf("%s is %w", name, ErrInvalidExporter)
}
