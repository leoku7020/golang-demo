// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package envkit

import (
	"errors"
	"fmt"
	"strings"
)

const (
	// EnvNone is a Env of type None.
	// Not registered namespace by default.
	EnvNone Env = iota
	// EnvDevelopment is a Env of type Development.
	// Development environment namespace.
	EnvDevelopment
	// EnvStaging is a Env of type Staging.
	// Staging environment namespace.
	EnvStaging
	// EnvProduction is a Env of type Production.
	// Production environment namespace.
	EnvProduction
	// EnvStagingCS is a Env of type Staging-CS.
	// Staging for CS environment namespace.
	EnvStagingCS
	// EnvStagingRT is a Env of type Staging-RT.
	// Staging for RT environment namespace.
	EnvStagingRT
	// EnvStagingST is a Env of type Staging-ST.
	// Staging for ST environment namespace.
	EnvStagingST
	// EnvStagingTT is a Env of type Staging-TT.
	// Staging for TT environment namespace.
	EnvStagingTT
)

var ErrInvalidEnv = errors.New("not a valid Env")

const _EnvName = "NoneDevelopmentStagingProductionStaging-CSStaging-RTStaging-STStaging-TT"

var _EnvMap = map[Env]string{
	EnvNone:        _EnvName[0:4],
	EnvDevelopment: _EnvName[4:15],
	EnvStaging:     _EnvName[15:22],
	EnvProduction:  _EnvName[22:32],
	EnvStagingCS:   _EnvName[32:42],
	EnvStagingRT:   _EnvName[42:52],
	EnvStagingST:   _EnvName[52:62],
	EnvStagingTT:   _EnvName[62:72],
}

// String implements the Stringer interface.
func (x Env) String() string {
	if str, ok := _EnvMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Env(%d)", x)
}

var _EnvValue = map[string]Env{
	_EnvName[0:4]:                    EnvNone,
	strings.ToLower(_EnvName[0:4]):   EnvNone,
	_EnvName[4:15]:                   EnvDevelopment,
	strings.ToLower(_EnvName[4:15]):  EnvDevelopment,
	_EnvName[15:22]:                  EnvStaging,
	strings.ToLower(_EnvName[15:22]): EnvStaging,
	_EnvName[22:32]:                  EnvProduction,
	strings.ToLower(_EnvName[22:32]): EnvProduction,
	_EnvName[32:42]:                  EnvStagingCS,
	strings.ToLower(_EnvName[32:42]): EnvStagingCS,
	_EnvName[42:52]:                  EnvStagingRT,
	strings.ToLower(_EnvName[42:52]): EnvStagingRT,
	_EnvName[52:62]:                  EnvStagingST,
	strings.ToLower(_EnvName[52:62]): EnvStagingST,
	_EnvName[62:72]:                  EnvStagingTT,
	strings.ToLower(_EnvName[62:72]): EnvStagingTT,
}

// ParseEnv attempts to convert a string to a Env.
func ParseEnv(name string) (Env, error) {
	if x, ok := _EnvValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _EnvValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Env(0), fmt.Errorf("%s is %w", name, ErrInvalidEnv)
}
