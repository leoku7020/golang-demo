// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package sql

import (
	"errors"
	"fmt"
	"strings"
)

const (
	// DriverNone is a Driver of type None.
	// not existed
	DriverNone Driver = iota
	// DriverPostgres is a Driver of type Postgres.
	DriverPostgres
	// DriverMysql is a Driver of type Mysql.
	DriverMysql
	// DriverSqlite3 is a Driver of type Sqlite3.
	DriverSqlite3
	// DriverMssql is a Driver of type Mssql.
	DriverMssql
	// DriverRedshift is a Driver of type Redshift.
	DriverRedshift
	// DriverTidb is a Driver of type Tidb.
	DriverTidb
	// DriverClickhouse is a Driver of type Clickhouse.
	DriverClickhouse
)

var ErrInvalidDriver = errors.New("not a valid Driver")

const _DriverName = "NonePostgresMysqlSqlite3MssqlRedshiftTidbClickhouse"

var _DriverMap = map[Driver]string{
	DriverNone:       _DriverName[0:4],
	DriverPostgres:   _DriverName[4:12],
	DriverMysql:      _DriverName[12:17],
	DriverSqlite3:    _DriverName[17:24],
	DriverMssql:      _DriverName[24:29],
	DriverRedshift:   _DriverName[29:37],
	DriverTidb:       _DriverName[37:41],
	DriverClickhouse: _DriverName[41:51],
}

// String implements the Stringer interface.
func (x Driver) String() string {
	if str, ok := _DriverMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Driver(%d)", x)
}

var _DriverValue = map[string]Driver{
	_DriverName[0:4]:                    DriverNone,
	strings.ToLower(_DriverName[0:4]):   DriverNone,
	_DriverName[4:12]:                   DriverPostgres,
	strings.ToLower(_DriverName[4:12]):  DriverPostgres,
	_DriverName[12:17]:                  DriverMysql,
	strings.ToLower(_DriverName[12:17]): DriverMysql,
	_DriverName[17:24]:                  DriverSqlite3,
	strings.ToLower(_DriverName[17:24]): DriverSqlite3,
	_DriverName[24:29]:                  DriverMssql,
	strings.ToLower(_DriverName[24:29]): DriverMssql,
	_DriverName[29:37]:                  DriverRedshift,
	strings.ToLower(_DriverName[29:37]): DriverRedshift,
	_DriverName[37:41]:                  DriverTidb,
	strings.ToLower(_DriverName[37:41]): DriverTidb,
	_DriverName[41:51]:                  DriverClickhouse,
	strings.ToLower(_DriverName[41:51]): DriverClickhouse,
}

// ParseDriver attempts to convert a string to a Driver.
func ParseDriver(name string) (Driver, error) {
	if x, ok := _DriverValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _DriverValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Driver(0), fmt.Errorf("%s is %w", name, ErrInvalidDriver)
}
