// Code generated by mockery v2.20.0. DO NOT EDIT.

package example

import (
	context "context"
	domainexample "demo/internal/models/example"

	mock "github.com/stretchr/testify/mock"
)

// MockExampleRepository is an autogenerated mock type for the ExampleRepository type
type MockExampleRepository struct {
	mock.Mock
}

// FindMember provides a mock function with given fields: ctx, username
func (_m *MockExampleRepository) FindMember(ctx context.Context, username string) (*domainexample.Member, error) {
	ret := _m.Called(ctx, username)

	var r0 *domainexample.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domainexample.Member, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domainexample.Member); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domainexample.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListItems provides a mock function with given fields: ctx, username, item
func (_m *MockExampleRepository) ListItems(ctx context.Context, username string, item string) ([]*domainexample.Item, error) {
	ret := _m.Called(ctx, username, item)

	var r0 []*domainexample.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*domainexample.Item, error)); ok {
		return rf(ctx, username, item)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*domainexample.Item); ok {
		r0 = rf(ctx, username, item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domainexample.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockExampleRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockExampleRepository creates a new instance of MockExampleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockExampleRepository(t mockConstructorTestingTNewMockExampleRepository) *MockExampleRepository {
	mock := &MockExampleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
